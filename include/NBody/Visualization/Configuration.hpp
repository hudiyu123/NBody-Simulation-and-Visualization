#ifndef CPP_PROJECT_INCLUDE_NBODY_VISUALIZATION_CONFIGURATION_HPP_
#define CPP_PROJECT_INCLUDE_NBODY_VISUALIZATION_CONFIGURATION_HPP_

#include <string>
#include <utility>

namespace NBody::Visualization {

struct Configuration {
  /// \brief The hint for the speed of the camera. The default value is 0.
  float cameraSpeedHint{};
  /// \brief The initial z position of the camera. The default value is 0.
  float cameraPositionHint{};
  /// \brief The FPS of the visualization. The default value is 60.
  /// \note The value of this parameter must be greater than or equal to 1.
  std::uint64_t fps{60};
  /// \brief The ratio of the visualization time to the real time. The default
  /// value is 1.
  /// \note The value of this parameter must be greater than or equal to 0.
  double ratio{1};
  /// \brief The initial width of the window. The default value is 1024.
  /// \note The value of this parameter must be greater than or equal to 1.
  int windowWidth{1024};
  /// \brief The initial height of the window. The default value is 768.
  /// \note The value of this parameter must be greater than or equal to 1.
  int windowHeight{768};
  /// \brief The level of subdivision for the icosphere. The default value is 3.
  /// \details Since it is impossible to draw all the points on a sphere,
  /// approximate representations are used which only sampling a limited number
  /// of points by dividing the sphere.\n
  /// \n
  /// The simulator renders each particle as an icosphere.  It is generated by
  /// recursively subdividing an icosahedron. An icosahedron is a regular
  /// polyhedron with 12 vertices and 20 equilateral triangles. Each triangle
  /// of an icosahedron is divided into 4 equal sub-triangles per subdivision.
  /// \note The FPS will drop significantly if the level of subdivision is too
  /// high.
  std::uint64_t icosphereSubdivision{3};
};

} // namespace NBody::Visualization

#endif // CPP_PROJECT_INCLUDE_NBODY_VISUALIZATION_CONFIGURATION_HPP_
